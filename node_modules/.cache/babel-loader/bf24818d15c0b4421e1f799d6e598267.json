{"ast":null,"code":"var _jsxFileName = \"/home/davide/Desktop/test-projects/recoil-test/src/Components/TextInput.jsx\";\nimport React from 'react';\nimport { useRecoilState, atom } from 'recoil'; // import charCountState from './CharacterCount';\n//declare a new atom\n//key is a unique value with respect to other atoms and selectors\n\nconst textState = atom({\n  key: 'textState',\n  default: ''\n}); //what does get do again?\n//selectors are derived state, the returned result of changing state\n\nconst charCountState = selector({\n  key: 'charCountState',\n  get: ({\n    get\n  }) => {\n    const text = get(textState);\n    return text.length;\n  }\n});\n\nfunction CharacterCount() {\n  const count = useRecoilValue(charCountState);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, \"Character Count: \", count, \" \");\n} //use useRecoilState to read and from an atom\n\n\nconst TextInput = () => {\n  const [text, setText] = useRecoilState(textState);\n\n  const onChange = event => {\n    setText(event.target.value);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: text,\n    onChange: e => onChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }), \"Echo: \", text);\n};\n\nexport default TextInput;","map":{"version":3,"sources":["/home/davide/Desktop/test-projects/recoil-test/src/Components/TextInput.jsx"],"names":["React","useRecoilState","atom","textState","key","default","charCountState","selector","get","text","length","CharacterCount","count","useRecoilValue","TextInput","setText","onChange","event","target","value","e"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,IAAzB,QAAqC,QAArC,C,CACA;AAEA;AACA;;AACA,MAAMC,SAAS,GAAGD,IAAI,CAAC;AACnBE,EAAAA,GAAG,EAAE,WADc;AAEnBC,EAAAA,OAAO,EAAE;AAFU,CAAD,CAAtB,C,CAOE;AACA;;AACA,MAAMC,cAAc,GAAGC,QAAQ,CAAC;AAC5BH,EAAAA,GAAG,EAAE,gBADuB;AAE5BI,EAAAA,GAAG,EAAE,CAAC;AAACA,IAAAA;AAAD,GAAD,KAAW;AACZ,UAAMC,IAAI,GAAGD,GAAG,CAACL,SAAD,CAAhB;AAEA,WAAOM,IAAI,CAACC,MAAZ;AACD;AANyB,CAAD,CAA/B;;AASE,SAASC,cAAT,GAA0B;AAC1B,QAAMC,KAAK,GAAGC,cAAc,CAACP,cAAD,CAA5B;AAEA,sBAAO,+DAAoBM,KAApB,MAAP;AACH,C,CACD;;;AACA,MAAME,SAAS,GAAG,MAAM;AACpB,QAAM,CAACL,IAAD,EAAOM,OAAP,IAAkBd,cAAc,CAACE,SAAD,CAAtC;;AAEA,QAAMa,QAAQ,GAAIC,KAAD,IAAW;AAC1BF,IAAAA,OAAO,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;AACD,GAFD;;AAIA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAEV,IAA1B;AAAgC,IAAA,QAAQ,EAAGW,CAAD,IAAOJ,QAAQ,CAACI,CAAD,CAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,YAGWX,IAHX,CADJ;AAOH,CAdD;;AAgBA,eAAeK,SAAf","sourcesContent":["import React from 'react';\nimport { useRecoilState, atom } from 'recoil';\n// import charCountState from './CharacterCount';\n\n//declare a new atom\n//key is a unique value with respect to other atoms and selectors\nconst textState = atom({\n    key: 'textState',\n    default: '',\n  })\n\n\n  \n  //what does get do again?\n  //selectors are derived state, the returned result of changing state\n  const charCountState = selector({\n      key: 'charCountState',\n      get: ({get}) => {\n          const text = get(textState);\n          \n          return text.length;\n        }\n    })\n    \n    function CharacterCount() {\n    const count = useRecoilValue(charCountState);\n\n    return <>Character Count: {count} </>;\n}\n//use useRecoilState to read and from an atom\nconst TextInput = () => {\n    const [text, setText] = useRecoilState(textState);\n  \n    const onChange = (event) => {\n      setText(event.target.value);\n    }\n  \n    return (\n        <div>\n            <input type=\"text\" value={text} onChange={(e) => onChange(e)} />\n            <br />\n            Echo: {text}\n        </div>\n    )\n}\n\nexport default TextInput;"]},"metadata":{},"sourceType":"module"}