{"ast":null,"code":"var _jsxFileName = \"/home/davide/Desktop/test-projects/recoil-test/src/Components/TextInput.jsx\";\nimport React from 'react';\nimport { useRecoilState, atom } from 'recoil';\nimport { selector, useRecoilValue } from 'recoil'; // import charCountState from './CharacterCount';\n//declare a new atom\n//key is a unique value with respect to other atoms and selectors\n\nconst textState = atom({\n  key: 'textState',\n  default: ''\n}); //what does get do again?\n//selectors are derived state, the returned result of changing state\n\nconst charCountState = selector({\n  key: 'charCountState',\n  get: ({\n    get\n  }) => {\n    const text = get(textState);\n    return text.length;\n  }\n});\nexport const CharacterCount = () => {\n  const count = useRecoilValue(charCountState);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, \"Character Count: \", count, \" \");\n}; //use useRecoilState to read and from an atom\n\nexport const TextInput = () => {\n  const [text, setText] = useRecoilState(textState);\n\n  const onChange = event => {\n    setText(event.target.value);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"char-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: text,\n    onChange: e => onChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }), \"Echo: \", text);\n};","map":{"version":3,"sources":["/home/davide/Desktop/test-projects/recoil-test/src/Components/TextInput.jsx"],"names":["React","useRecoilState","atom","selector","useRecoilValue","textState","key","default","charCountState","get","text","length","CharacterCount","count","TextInput","setText","onChange","event","target","value","e"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,IAAzB,QAAqC,QAArC;AACA,SACIC,QADJ,EAEIC,cAFJ,QAGO,QAHP,C,CAIA;AAEA;AACA;;AACA,MAAMC,SAAS,GAAGH,IAAI,CAAC;AACnBI,EAAAA,GAAG,EAAE,WADc;AAEnBC,EAAAA,OAAO,EAAE;AAFU,CAAD,CAAtB,C,CAOA;AACA;;AACA,MAAMC,cAAc,GAAGL,QAAQ,CAAC;AAC5BG,EAAAA,GAAG,EAAE,gBADuB;AAE5BG,EAAAA,GAAG,EAAE,CAAC;AAACA,IAAAA;AAAD,GAAD,KAAW;AACZ,UAAMC,IAAI,GAAGD,GAAG,CAACJ,SAAD,CAAhB;AACA,WAAOK,IAAI,CAACC,MAAZ;AACH;AAL2B,CAAD,CAA/B;AAQA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAChC,QAAMC,KAAK,GAAGT,cAAc,CAACI,cAAD,CAA5B;AACA,sBAAO,+DAAoBK,KAApB,MAAP;AACH,CAHM,C,CAKP;;AACA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC3B,QAAM,CAACJ,IAAD,EAAOK,OAAP,IAAkBd,cAAc,CAACI,SAAD,CAAtC;;AAEA,QAAMW,QAAQ,GAAIC,KAAD,IAAW;AAC1BF,IAAAA,OAAO,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;AACD,GAFD;;AAIA,sBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAET,IAA1B;AAAgC,IAAA,QAAQ,EAAGU,CAAD,IAAOJ,QAAQ,CAACI,CAAD,CAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,YAGWV,IAHX,CADJ;AAOH,CAdM","sourcesContent":["import React from 'react';\nimport { useRecoilState, atom } from 'recoil';\nimport { \n    selector, \n    useRecoilValue\n} from 'recoil';\n// import charCountState from './CharacterCount';\n\n//declare a new atom\n//key is a unique value with respect to other atoms and selectors\nconst textState = atom({\n    key: 'textState',\n    default: '',\n});\n\n\n  \n//what does get do again?\n//selectors are derived state, the returned result of changing state\nconst charCountState = selector({\n    key: 'charCountState',\n    get: ({get}) => {\n        const text = get(textState);\n        return text.length;\n    }\n});\n    \nexport const CharacterCount = () => {\n    const count = useRecoilValue(charCountState);\n    return <>Character Count: {count} </>;\n};\n\n//use useRecoilState to read and from an atom\nexport const TextInput = () => {\n    const [text, setText] = useRecoilState(textState);\n  \n    const onChange = (event) => {\n      setText(event.target.value);\n    }\n  \n    return (\n        <div className=\"char-container\">\n            <input type=\"text\" value={text} onChange={(e) => onChange(e)} />\n            <br />\n            Echo: {text}\n        </div>\n    )\n};"]},"metadata":{},"sourceType":"module"}